---
layout: post
title:      "The Freedom of Constraint"
date:       2018-10-24 19:17:09 +0000
permalink:  the_freedom_of_constraint
---


I am at the point in my Rails with JavaScript Portfolio Project where I have fulfilled all of the project requirements, but I do not feel ready to hit the submit button.  Rather than start from scratch, the instructions for this project were to add JavaScript to our previously submitted Rails application.  How much do I need to add? How much do I need to change? I felt simultaneously underwhelmed and overwhelmed.  I was *underwhelmed* because using my pre-existing application meant that much of the JavaScript I would need to incorporate would simply be replacing Ruby code without changing the functionality.  I was *overwhelmed* by the notion that I had to add new functionality (in a new language) to an application that already encompassed the features that I had originally intended it to have.  My "if it isn't broken, why fix it?" attitude faded as I began to implement features that greatly improved the application.

As I got to work, I mentally divided my tasks into two groups: modification and creation.  The modification tasks are those in which I replaced some of my Ruby code with new JavaScript code but, as far as a user would be able to tell, left the functionality the same.  In my previous application, when a user would navigate to his/her page, every review that he/she had written would be loaded through iteration of a Ruby object and could then be filtered using join tables.  In my new version of the application, the user's page will still load all of that user's reviews, but now the work is being done in the JavaScript file where the JSON data is retrieved through a get request and then appended onto that user's page.  If a user filters the reviews, the list of reviews is updated accordingly without reloading the page.  As a user, the information on the page looks the same but it is being accessed in an entirely different way.  Before I began, these modification tasks seemed like a lot of work with little reward.  I quickly realized that in this case, the reward was not in the visible changes to the page, but in the *lack* of visible changes.  Upon completion of these modification tasks, I felt incredibly satisfied that I had taken something written in Ruby and rewritten it in JavaScript without altering the functionality from the user's perspective. 

The creation tasks are those in which I was adding a new feature to my application.  For example, I added JavaScript code so that when a user is viewing a specific book review, he/she can click a "Next" button and move to the next review of that book, changing the content of the page dynamically so that it does not have to be reloaded.  These creation tasks posed a different challenge than the modification tasks.  I used a lab that required the same functionality to move from blog post to blog post as my point of reference for how the "Next" button should work.  At first, it didn't even feel like i was "creating" a new feature because I could replicate the code I had used before.  When I ran the application, I realized it was not going to be quite so simple. The original code that I used for the "Next" button relied on the reviews having consecutive primary keys which caused a problem.  If a user writes a review for Harry Potter and then for The Notebook, and then a second review for Harry Potter, these reviews will have consecutive primary keys.  However, the "Next" button moves to the next review of a *specific book*.  The ids of the reviews for Harry Potter are 1 and 3, so the code cannot rely on ids to find the next review.  I was still able to use the general format of the code from the lab, but I had to adjust much of the code to meet my needs.  

It dawned on me that although I was "creating" something new in my application, this task of implementing the "Next" button is actually a "modification" task.  I am taking *old* code and *modifying* it to create *new* functionality.  In fact, the "modification" task of rewriting code but maintaining functionality is actually a "creation" task.  I am writing *new* code and *creating* JavaScript functions that produce the same functionality as the *old* code.  

Before beginning the project, I felt constrained by the walls of my original application.  Writing JavaScript in place of Ruby felt like trying to redecorate a room just by moving the furniture around.  Adding new functionality felt like trying to improve a room just by adding a new lamp.  Both seemed unnecessary.  After finishing the project, I realized that my original application was not restricting me, but serving as the foundation for my improved application.  Writing JavaScript in place of Ruby now feels like redecorating a room with entirely new furniture.  Adding new functionality now feels like improving a room by knocking down a wall and making it bigger.  When rewriting code, or when redecorating a room, the existing structure should not limit creativity and innovation, but rather it should enhance it, challenging you to make the most with what space you have.  When adding new features to an application, or when extending a room's wall, the adequacy of the existing structure should not generate complacency, but rather it should incite a desire to go beyond what you thought was possible.



